{
  
    
        "post0": {
            "title": "Select the stock tickers to analyze",
            "content": "The get_all tickers python library allows us to get all tickers from NYSE, NASDAQ and Amex. . This list can also be filtered by market caps, and save list to a CSV. . from get_all_tickers import get_tickers as gt . top_10 = gt.get_biggest_n_tickers(10) print(top_10) . [&#39;AAPL&#39;, &#39;MSFT&#39;, &#39;AMZN&#39;, &#39;GOOG&#39;, &#39;GOOGL&#39;, &#39;BABA&#39;, &#39;FB&#39;, &#39;V&#39;, &#39;TSM&#39;, &#39;TV&#39;] . small_cap = gt.get_tickers_filtered(mktcap_min=200, mktcap_max=2000) # Check the amount of tickers print(&quot;The amount of small cap stocks chosen to observe: &quot; + str(len(small_cap))) . The amount of small cap stocks chosen to observe: 2086 . large_cap = gt.get_tickers_filtered(mktcap_min=150e3) # Check the amount of tickers print(&quot;The amount of large cap stocks chosen to observe: &quot; + str(len(large_cap))) . The amount of large cap stocks chosen to observe: 48 . print(small_cap[:20]) . [&#39;DDD&#39;, &#39;EGHT&#39;, &#39;ATEN&#39;, &#39;AIR&#39;, &#39;ANF&#39;, &#39;AWP&#39;, &#39;AOD&#39;, &#39;AKR&#39;, &#39;ACEL&#39;, &#39;ACCO&#39;, &#39;ADX&#39;, &#39;PEO&#39;, &#39;AGRO&#39;, &#39;ADNT&#39;, &#39;ATGE&#39;, &#39;ASIX&#39;, &#39;AVK&#39;, &#39;ALG&#39;, &#39;AIN&#39;, &#39;ALEX&#39;] . print(large_cap) . [&#39;ABT&#39;, &#39;ABBV&#39;, &#39;BABA&#39;, &#39;T&#39;, &#39;BAC&#39;, &#39;KO&#39;, &#39;TV&#39;, &#39;HD&#39;, &#39;JPM&#39;, &#39;JNJ&#39;, &#39;MA&#39;, &#39;MCD&#39;, &#39;MRK&#39;, &#39;NKE&#39;, &#39;NVS&#39;, &#39;NVO&#39;, &#39;ORCL&#39;, &#39;PFE&#39;, &#39;PG&#39;, &#39;CRM&#39;, &#39;SAP&#39;, &#39;TSM&#39;, &#39;TMO&#39;, &#39;TM&#39;, &#39;UN&#39;, &#39;UL&#39;, &#39;UNH&#39;, &#39;VZ&#39;, &#39;V&#39;, &#39;WMT&#39;, &#39;DIS&#39;, &#39;ADBE&#39;, &#39;GOOG&#39;, &#39;GOOGL&#39;, &#39;AMZN&#39;, &#39;AAPL&#39;, &#39;ASML&#39;, &#39;CSCO&#39;, &#39;CMCSA&#39;, &#39;COST&#39;, &#39;FB&#39;, &#39;INTC&#39;, &#39;MSFT&#39;, &#39;NFLX&#39;, &#39;NVDA&#39;, &#39;PYPL&#39;, &#39;PEP&#39;, &#39;TSLA&#39;] . type(large_cap) . list . Save list to csv file . import pandas as pd . top_10_df = pd.DataFrame(top_10) top_10_df.to_csv(r&quot;C: Users ijeke Documents Algo Trading Stocklist top_10_df.csv&quot;) . small_cap_df = pd.DataFrame(small_cap) small_cap_df.to_csv(r&quot;C: Users ijeke Documents Algo Trading Stocklist small_cap_df.csv&quot;) . large_cap_df = pd.DataFrame(large_cap) large_cap_df.to_csv(r&quot;C: Users ijeke Documents Algo Trading Stocklist large_cap_df.csv&quot;) . Download data for the stock . The pandas_datareader library provides us with a python function to extract stock data from yahoo. . from pandas_datareader import data import numpy as np import pandas as pd from datetime import datetime from datetime import date, timedelta . days = timedelta(90) start = date.today() - days today = date.today() print(&#39;Current Date: &#39;, today) print(days) print(&#39;Start Date: &#39;, start) print(&#39; n&#39;) . Current Date: 2020-09-25 90 days, 0:00:00 Start Date: 2020-06-27 . Select Stock List . symbols = top_10 # load data from yahoo stock_data = data.DataReader(symbols, start=start, end=today, data_source=&#39;yahoo&#39;) stock_data.tail() . Attributes Adj Close ... Volume . Symbols AAPL MSFT AMZN GOOG GOOGL BABA FB V TSM TV ... AAPL MSFT AMZN GOOG GOOGL BABA FB V TSM TV . Date . 2020-09-21 110.080002 | 202.539993 | 2960.469971 | 1431.160034 | 1430.140015 | 273.820007 | 248.149994 | 197.449997 | 80.589996 | 6.19 | ... | 195713800.0 | 39839700.0 | 6117900.0 | 2888800.0 | 2845400.0 | 9076400.0 | 24709400.0 | 9656000.0 | 8417100.0 | 859000.0 | . 2020-09-22 111.809998 | 207.419998 | 3128.989990 | 1465.459961 | 1459.819946 | 275.290009 | 254.750000 | 200.559998 | 80.480003 | 6.23 | ... | 183055400.0 | 33517100.0 | 6948800.0 | 1583200.0 | 1697500.0 | 9673300.0 | 30293100.0 | 7543100.0 | 6375200.0 | 1017900.0 | . 2020-09-23 107.120003 | 200.589996 | 2999.860107 | 1415.209961 | 1409.390015 | 272.950012 | 249.020004 | 195.369995 | 77.919998 | 6.16 | ... | 150718700.0 | 30803800.0 | 5652700.0 | 1657400.0 | 1886300.0 | 7353200.0 | 19641300.0 | 6310600.0 | 9094700.0 | 2544300.0 | . 2020-09-24 108.220001 | 203.190002 | 3019.790039 | 1428.290039 | 1422.859985 | 269.730011 | 249.529999 | 195.520004 | 78.379997 | 6.20 | ... | 166602400.0 | 31151500.0 | 5512600.0 | 1449500.0 | 1725700.0 | 9550400.0 | 19975000.0 | 9861900.0 | 9935200.0 | 1105400.0 | . 2020-09-25 112.279999 | 207.820007 | 3095.129883 | 1444.959961 | 1439.060059 | 271.089996 | 254.820007 | 197.250000 | 78.879997 | 6.07 | ... | 145275191.0 | 27535693.0 | 4615202.0 | 1323375.0 | 1343466.0 | 9454702.0 | 17520744.0 | 5136520.0 | 6018427.0 | 2226698.0 | . 5 rows × 60 columns . stock_data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 63 entries, 2020-06-29 to 2020-09-25 Data columns (total 60 columns): # Column Non-Null Count Dtype -- -- 0 (Adj Close, AAPL) 63 non-null float64 1 (Adj Close, MSFT) 63 non-null float64 2 (Adj Close, AMZN) 63 non-null float64 3 (Adj Close, GOOG) 63 non-null float64 4 (Adj Close, GOOGL) 63 non-null float64 5 (Adj Close, BABA) 63 non-null float64 6 (Adj Close, FB) 63 non-null float64 7 (Adj Close, V) 63 non-null float64 8 (Adj Close, TSM) 63 non-null float64 9 (Adj Close, TV) 63 non-null float64 10 (Close, AAPL) 63 non-null float64 11 (Close, MSFT) 63 non-null float64 12 (Close, AMZN) 63 non-null float64 13 (Close, GOOG) 63 non-null float64 14 (Close, GOOGL) 63 non-null float64 15 (Close, BABA) 63 non-null float64 16 (Close, FB) 63 non-null float64 17 (Close, V) 63 non-null float64 18 (Close, TSM) 63 non-null float64 19 (Close, TV) 63 non-null float64 20 (High, AAPL) 63 non-null float64 21 (High, MSFT) 63 non-null float64 22 (High, AMZN) 63 non-null float64 23 (High, GOOG) 63 non-null float64 24 (High, GOOGL) 63 non-null float64 25 (High, BABA) 63 non-null float64 26 (High, FB) 63 non-null float64 27 (High, V) 63 non-null float64 28 (High, TSM) 63 non-null float64 29 (High, TV) 63 non-null float64 30 (Low, AAPL) 63 non-null float64 31 (Low, MSFT) 63 non-null float64 32 (Low, AMZN) 63 non-null float64 33 (Low, GOOG) 63 non-null float64 34 (Low, GOOGL) 63 non-null float64 35 (Low, BABA) 63 non-null float64 36 (Low, FB) 63 non-null float64 37 (Low, V) 63 non-null float64 38 (Low, TSM) 63 non-null float64 39 (Low, TV) 63 non-null float64 40 (Open, AAPL) 63 non-null float64 41 (Open, MSFT) 63 non-null float64 42 (Open, AMZN) 63 non-null float64 43 (Open, GOOG) 63 non-null float64 44 (Open, GOOGL) 63 non-null float64 45 (Open, BABA) 63 non-null float64 46 (Open, FB) 63 non-null float64 47 (Open, V) 63 non-null float64 48 (Open, TSM) 63 non-null float64 49 (Open, TV) 63 non-null float64 50 (Volume, AAPL) 63 non-null float64 51 (Volume, MSFT) 63 non-null float64 52 (Volume, AMZN) 63 non-null float64 53 (Volume, GOOG) 63 non-null float64 54 (Volume, GOOGL) 63 non-null float64 55 (Volume, BABA) 63 non-null float64 56 (Volume, FB) 63 non-null float64 57 (Volume, V) 63 non-null float64 58 (Volume, TSM) 63 non-null float64 59 (Volume, TV) 63 non-null float64 dtypes: float64(60) memory usage: 30.0 KB . Visualize returns on the Selected Stocks . import matplotlib.pyplot as plt %matplotlib inline . stock_data.iloc[:, stock_data.columns.get_level_values(&#39;Attributes&#39;) == &#39;Adj Close&#39;].tail() . Attributes Adj Close . Symbols AAPL MSFT AMZN GOOG GOOGL BABA FB V TSM TV . Date . 2020-09-21 110.080002 | 202.539993 | 2960.469971 | 1431.160034 | 1430.140015 | 273.820007 | 248.149994 | 197.449997 | 80.589996 | 6.19 | . 2020-09-22 111.809998 | 207.419998 | 3128.989990 | 1465.459961 | 1459.819946 | 275.290009 | 254.750000 | 200.559998 | 80.480003 | 6.23 | . 2020-09-23 107.120003 | 200.589996 | 2999.860107 | 1415.209961 | 1409.390015 | 272.950012 | 249.020004 | 195.369995 | 77.919998 | 6.16 | . 2020-09-24 108.220001 | 203.190002 | 3019.790039 | 1428.290039 | 1422.859985 | 269.730011 | 249.529999 | 195.520004 | 78.379997 | 6.20 | . 2020-09-25 112.279999 | 207.820007 | 3095.129883 | 1444.959961 | 1439.060059 | 271.089996 | 254.820007 | 197.250000 | 78.879997 | 6.07 | . stock_data_return = stock_data.iloc[:, stock_data.columns.get_level_values(&#39;Attributes&#39;) == &#39;Adj Close&#39;].pct_change().mul(100) stock_data_return.plot(subplots=True, figsize=[12,20]) plt.show() . stock_data = stock_data.stack() stock_data.tail() . Attributes Adj Close Close High Low Open Volume . Date Symbols . 2020-09-25 BABA 271.089996 | 271.089996 | 271.809998 | 264.559998 | 267.570007 | 9454702.0 | . FB 254.820007 | 254.820007 | 255.750000 | 246.610001 | 249.399994 | 17520744.0 | . V 197.250000 | 197.250000 | 198.139999 | 193.509995 | 195.020004 | 5136520.0 | . TSM 78.879997 | 78.879997 | 78.919998 | 77.389999 | 78.169998 | 6018427.0 | . TV 6.070000 | 6.070000 | 6.190000 | 5.995000 | 6.180000 | 2226698.0 | . stock_data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; MultiIndex: 630 entries, (Timestamp(&#39;2020-06-29 00:00:00&#39;), &#39;AAPL&#39;) to (Timestamp(&#39;2020-09-25 00:00:00&#39;), &#39;TV&#39;) Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 Adj Close 630 non-null float64 1 Close 630 non-null float64 2 High 630 non-null float64 3 Low 630 non-null float64 4 Open 630 non-null float64 5 Volume 630 non-null float64 dtypes: float64(6) memory usage: 31.4+ KB . Select a stock . selected_stock = &#39;BABA&#39; # get data from second level index by stock ticker #stock = stock_data[stock_data.index.get_level_values(&#39;Symbols&#39;) == stock].reset_index(level=1, drop=True) stock = stock_data[stock_data.index.get_level_values(&#39;Symbols&#39;) == selected_stock].reset_index(level=1) . stock.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 63 entries, 2020-06-29 to 2020-09-25 Data columns (total 7 columns): # Column Non-Null Count Dtype -- -- 0 Symbols 63 non-null object 1 Adj Close 63 non-null float64 2 Close 63 non-null float64 3 High 63 non-null float64 4 Low 63 non-null float64 5 Open 63 non-null float64 6 Volume 63 non-null float64 dtypes: float64(6), object(1) memory usage: 3.9+ KB . Visualize the data using different price-momentum indicators . import matplotlib.pyplot as plt %matplotlib inline import mplfinance as mpf mpf.__version__ . &#39;0.12.7a0&#39; . All the charts assume 10, 20 or 50 days for moving average. . Price vs Moving Average . mpf.plot(stock, type=&#39;line&#39;, mav=(10,20,50), volume=True, title = selected_stock) . Renko Price Chart . mpf.plot(stock, type=&#39;renko&#39;, renko_params=dict(brick_size=&#39;atr&#39;, atr_length=14), title = selected_stock, style=&#39;default&#39;) . PNF Chart . mpf.plot(stock, type=&#39;pnf&#39;, title = selected_stock) . Candlestick indicators with Volume . mpf.plot(stock, type=&#39;candle&#39;, mav=(10, 20, 50), volume=True, title = selected_stock) . OHLC indicator with volume . mpf.plot(stock, type=&#39;ohlc&#39;,mav=(10,20,50), volume=True,figratio=(20,12),figscale=2, style=&#39;yahoo&#39;, title= selected_stock) . OHLC indicator with Candlestick . ap = mpf.make_addplot(stock,panel=1,type=&#39;candle&#39;,ylabel=&#39;Candle&#39;,mav=(10,20,50)) mpf.plot(stock,mav=(10,20,50),ylabel=&#39;OHLC&#39;,addplot=ap,panel_ratios=(1,1),figratio=(20,12),figscale=2, title = selected_stock) . References . mplfinance . Jupyter Widgets . Datareader basic example (Yahoo Finance) . get_all tickers .",
            "url": "https://ijeomaodoko.github.io/my-blog/2020/09/29/Stock-Screener-with-price-movement-indicators-(.html",
            "relUrl": "/2020/09/29/Stock-Screener-with-price-movement-indicators-(.html",
            "date": " • Sep 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ijeomaodoko.github.io/my-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Ijeoma Odoko is a Data Savvy Engineer, who loves to manipulate data transforming it into insightful information. . I created this blog to capture my learnings in data analytics by writing articles. Join me on my journey. . My most recent data projects can be found here. . LinkedIn Profile . Github Profile .",
          "url": "https://ijeomaodoko.github.io/my-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ijeomaodoko.github.io/my-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}