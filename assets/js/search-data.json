{
  
    
        "post0": {
            "title": "Stock Price Movement Charts using Python",
            "content": "This purpose of this project was to create an stock price movement charts with widgets for interactivity using the available python libraries. . Price Movement Charts . Price movement charts help with timing the market for buying or selling opportunities by determining up and down trends in price movement. These charts can typically be used with any financial time series like stocks, bonds, options, futures or commodities. . Renko . Is a type of price movement chart that has no time dimension. The key parameter it requires is the box size which signifies each brick (price movement size). The box size can be set to a specific value, or it be set to be equal to the ATR (average true range) which is derived from the closing price of the stock. With these charts its able to quickly tell the direction of trend changes. . PNF . PNF otherwise known as Point and Figure Chart is very similar to the renko chart, in that it also does not have a time dimension. An X represents when the price has moved higher, and an O represents when the price has dropped. The PNF also has a box size that can be set as a specific value, or be equal to the ATR (average true range). . OHLC . This is a type of price movement chart that captures the open, high, low and closing prices for each given trading day. . The vertical line represents the range in prices from high to low for the day. The horizontal lines extending out from the vertical line, represents open price for the left, and close price for the right. . . Candlestick . Also known as Japanese candlesticks are a type of price movement chart that takes into consideration both price, time and volume. It helps to determine the sentiment of the market - Bullish or Bearish. Bullish - would indicate a buy, while Bearish - would indicate short or sell for a stock trader. . Candlestick patterns can help determine price direction and momentum. One key thing to note when using candlesticks to understand price movement, it is important to first identify the market trend, before finding candlestick patterns in the data. Candlestick patterns are also best suited for identifying short term price movements. . Long and short days . Long days refers to large price movement within the trading day, and short days refers to low price movement within the trading day. This comparison however is best suited for short-term price movement of about 5-10days. . . Load required libraries . Pandas_datareader to import historical data on stocks from yahoo. | Pandas for working with large data sets. | Datetime for handling date datatypes. | Matplotlib for data visualization. | ipwidgets for interactive widgets | Numpy for handling numeric arrays. | mplfinance for creating price movement charts | . !pip install mplfinance . Requirement already satisfied: mplfinance in /usr/local/lib/python3.6/dist-packages (0.12.7a0) Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from mplfinance) (3.2.2) Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from mplfinance) (1.0.5) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;mplfinance) (1.2.0) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;mplfinance) (0.10.0) Requirement already satisfied: numpy&gt;=1.11 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;mplfinance) (1.18.5) Requirement already satisfied: python-dateutil&gt;=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;mplfinance) (2.8.1) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;mplfinance) (2.4.7) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas-&gt;mplfinance) (2018.9) Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler&gt;=0.10-&gt;matplotlib-&gt;mplfinance) (1.15.0) . from pandas_datareader import data import numpy as np from datetime import datetime from datetime import date, timedelta import pandas as pd import matplotlib.pyplot as plt %matplotlib inline # import ipwidgets library and functions from __future__ import print_function from ipywidgets import interact, interactive, fixed import ipywidgets as widgets from IPython.display import display import mplfinance as mpf mpf.__version__ . /usr/local/lib/python3.6/dist-packages/pandas_datareader/compat/__init__.py:7: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. from pandas.util.testing import assert_frame_equal . &#39;0.12.7a0&#39; . Create widgets and dataframe for the stock data . Instructions for use. . Insert tuple of stock list. | Select stock from dropdown. | Select number of calendar days for dates from the last trading day. | Rerun all code after. | Create widget for stock list and number of calendar days . options = (&#39;MMM&#39;, &#39;AOS&#39;, &#39;AAN&#39;, &#39;ABB&#39;, &#39;ABT&#39;, &#39;ABBV&#39;, &#39;ABM&#39;, &#39;ACN&#39;, &#39;AYI&#39;, &#39;GOLF&#39;, &#39;ADCT&#39;, &#39;ADT&#39;, &#39;AAP&#39;, &#39;ADSW&#39;, &#39;WMS&#39;, &#39;ACM&#39;, &#39;AEG&#39;, &#39;AER&#39;, &#39;AJRD&#39;, &#39;AMG&#39;, &#39;AFL&#39;, &#39;AGCO&#39;, &#39;A&#39;, &#39;AEM&#39;, &#39;ADC&#39;, &#39;AL&#39;, &#39;APD&#39;, &#39;AGI&#39;, &#39;ALK&#39;, &#39;ALB&#39;, &#39;ACI&#39;, &#39;AA&#39;, &#39;ALC&#39;, &#39;ARE&#39;, &#39;AQN&#39;, &#39;BABA&#39;, &#39;Y&#39;) # create dropdown for selected stocks stock_ticker = widgets.Dropdown( options= options, description=&#39;Select Stock Ticker&#39;, disabled=False, style = {&#39;description_width&#39;: &#39;initial&#39;}, layout = {&#39;width&#39;: &#39;200px&#39;} ) # create selection slider for days w = widgets.IntSlider( value=90, min=5, max=365, step=1, description = &#39;Calendar days&#39;, disabled=False, continuous_update=False, orientation=&#39;horizontal&#39;, readout=True, readout_format=&#39;d&#39;, style = {&#39;description_width&#39;: &#39;initial&#39;,&#39;handle_color&#39; : &#39;blue&#39;}, layout = {&#39;width&#39;: &#39;400px&#39;} ) # create function for time frame of selected calendar days from today def timeframe(w): days = timedelta(w) start = date.today() - days today = date.today() print(&#39;Start Date: &#39;,start, &#39; &#39; ,&#39;Last Date: &#39;,today) dates = widgets.interactive_output(timeframe, {&#39;w&#39;: w} ) display(stock_ticker, w, dates) . Download data for the stock . v = widgets.Text( value=stock_ticker.value, description=&#39;Stockticker:&#39;, disabled=True ) # create function to load stock data from yahoo def load_stock_data(stock_ticker, w): start = date.today() - timedelta(w) today = date.today() stock_data = data.DataReader(stock_ticker, start=start, end=today, data_source=&#39;yahoo&#39;) return stock_data # create dataframe for selected stock stock = load_stock_data(stock_ticker.value, w.value) # display ticker and dataframe display(v, stock) . High Low Open Close Volume Adj Close . Date . 2020-06-29 156.509995 | 153.479996 | 153.899994 | 155.570007 | 2145100.0 | 154.166748 | . 2020-06-30 156.710007 | 154.050003 | 154.910004 | 155.990005 | 2941600.0 | 154.582962 | . 2020-07-01 157.800003 | 155.309998 | 156.339996 | 155.429993 | 1625600.0 | 154.028000 | . 2020-07-02 158.880005 | 156.460007 | 157.619995 | 157.039993 | 1982800.0 | 155.623474 | . 2020-07-06 159.960007 | 157.050003 | 158.869995 | 158.100006 | 2099500.0 | 156.673935 | . ... ... | ... | ... | ... | ... | ... | . 2020-09-21 166.669998 | 159.639999 | 165.979996 | 161.360001 | 3911700.0 | 161.360001 | . 2020-09-22 163.669998 | 160.419998 | 161.059998 | 162.339996 | 2103800.0 | 162.339996 | . 2020-09-23 164.240005 | 159.119995 | 162.520004 | 159.509995 | 2248200.0 | 159.509995 | . 2020-09-24 161.960007 | 158.070007 | 159.399994 | 160.419998 | 1569700.0 | 160.419998 | . 2020-09-25 160.979996 | 158.860001 | 159.309998 | 160.270004 | 1948900.0 | 160.270004 | . 63 rows × 6 columns . Visualize percentage daily changes for the selected stock over time . stock_data_return = stock[&#39;Adj Close&#39;].pct_change().mul(100) stock_data_return.plot(figsize=[12,6], grid=True, title = stock_ticker.value) plt.ylabel(&quot;Adjusted Close Returns&quot;) plt.show() . Visualise the stock price data using different price movement indicators . Instruction for use. . Select Chart Type and style. | All the charts assume 10, 20 or 50 days for moving average . chart_types = [(&#39;Line Price Chart&#39;, &#39;line&#39;), (&#39;Renko Price Chart&#39;, &#39;renko&#39;), (&#39;PNF Price Chart&#39;,&#39;pnf&#39;), (&#39;Candlestick Price Chart&#39;, &#39;candle&#39;), (&#39;OHLC Price Chart&#39;, &#39;ohlc&#39;)] chart = widgets.Dropdown( options= chart_types, description=&#39;Select Chart Type&#39;, disabled=False, style = {&#39;description_width&#39;: &#39;initial&#39;}, layout = {&#39;width&#39;: &#39;300px&#39;} ) # create drop down using mplfinance library built-in styles style_options = [&#39;binance&#39;, &#39;blueskies&#39;, &#39;brasil&#39;, &#39;charles&#39;, &#39;checkers&#39;, &#39;classic&#39;, &#39;default&#39;, &#39;mike&#39;, &#39;nightclouds&#39;, &#39;sas&#39;, &#39;starsandstripes&#39;, &#39;yahoo&#39;] style_option = widgets.Dropdown( options= style_options, description=&#39;Select Style&#39;, disabled=False, style = {&#39;description_width&#39;: &#39;initial&#39;}, layout = {&#39;width&#39;: &#39;300px&#39;} ) # create plot function using mplfinance library # fixed values for moving average (mav), figratio, and figscale, volume=True # default settings for renko and pnf charts (bricksize = &#39;atr&#39;, box_size=&#39;atr&#39;) def create_plot(chart, style_option): return mpf.plot(stock, type=chart, volume=True, mav = (10,20,50), figratio=(15, 8) , figscale=1.5, style=style_option, title = &#39; n&#39;f&#39;{stock_ticker.value}&#39;) widgets.interactive(create_plot, chart=chart, style_option=style_option) . References . mplfinance . | Jupyter Widgets . | Datareader basic example (Yahoo Finance) . | Morris, Gregory L., 1948-, Candlestick charting explained timeless techniques for trading stocks and futures [electronic resource], New York : McGraw-Hill, c2006, 3rd ed. . | Price Movement Charts . | Renko Charts . | PNF Charts . |",
            "url": "https://ijeomaodoko.github.io/my-blog/2020/09/29/Stock_Price_Movement_Charts_using_Python.html",
            "relUrl": "/2020/09/29/Stock_Price_Movement_Charts_using_Python.html",
            "date": " • Sep 29, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Ijeoma Odoko is a Data Savvy Engineer, who loves to manipulate data transforming it into insightful information. . I created this blog to capture my learnings in data analytics by writing articles. Join me on my journey. . My most recent data projects can be found here. . LinkedIn Profile . Github Profile .",
          "url": "https://ijeomaodoko.github.io/my-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ijeomaodoko.github.io/my-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}